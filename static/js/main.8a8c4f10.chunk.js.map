{"version":3,"sources":["utils/WeightLossUtils.ts","state/WeightLossPlanState.tsx","components/TDEEInput.tsx","components/WeightLossGoals.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["calculateTdee","weightLossPlanState","deficit","bmr","weight","height","age","gender","result","activityScale","calorieLoss","updatedWeight","tdee","calorieIntake","exercise","WeightLossPlanState","atom","key","default","bfp","bfpGoal","exerciseVolume","deficitMode","targetMode","days","weightGoal","TDEEState","selector","get","GoalDateState","average","newWeightLossPlanState","i","tdeeResult","push","reduce","a","b","getGoalDate","WeightGoalState","initialLossTarget","targetWeight","Number","parseInt","toFixed","getWeightGoalFromBFPGoal","state","selectors","TDEEInput","useRecoilState","setWeightLossPlanState","tdeeState","useRecoilValue","handleStateChange","_","throttle","newState","console","log","trailing","Container","className","FormControl","style","flexGrow","flexBasis","width","variant","InputLabel","shrink","Select","label","value","defaultValue","onChange","e","target","map","x","MenuItem","display","gap","TextField","type","inputProps","inputMode","min","event","Math","floor","Typography","gutterBottom","Slider","aria-labelledby","step","valueLabelDisplay","max","marks","valueLabelFormat","Card","padding","addDays","date","Date","setDate","getDate","WeightLossGoals","goalDateState","weightGoalState","getDeficitBasedOnMode","ToggleButtonGroup","aria-label","exclusive","newAlignment","ToggleButton","Paper","elevation","sx","marginBottom","color","bgcolor","InputProps","disabled","getUnitBasedOnMode","moment","format","App","flexDirection","AppBar","position","Toolbar","Grid","container","xs","spacing","item","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a8c4f10.chunk.js","sourcesContent":["import {GoalDateModel, TDEEModel, WeightLossPlanModel} from \"../state/WeightLossPlanState\";\r\n\r\nexport function calculateTdee(weightLossPlanState: WeightLossPlanModel, deficit: number): TDEEModel {\r\n  const bmr = (10 * weightLossPlanState.weight * 0.453592) + (6.25 * weightLossPlanState.height * 2.54) - (5 * weightLossPlanState.age) + (weightLossPlanState.gender === 'Male' ? 5 : 161);\r\n  const result = bmr * weightLossPlanState.activityScale;\r\n  const calorieLoss = (result * deficit);\r\n  return {\r\n    updatedWeight: weightLossPlanState.weight + (calorieLoss / 3500),\r\n    bmr,\r\n    tdee: result,\r\n    calorieIntake: result + calorieLoss,\r\n    calorieLoss,\r\n    exercise: result - bmr\r\n  };\r\n}\r\n\r\nexport function compoundTdee(tdee: any, deficit: number, days: number, step: number): any {\r\n  if(!tdee.weightGoal || !tdee.weight || tdee.weight <= tdee.weightGoal) {\r\n    return [tdee];\r\n  }\r\n  step = step ?? 1;\r\n  let resultData = [];\r\n  let newTdee = {...tdee, tdeeParams: tdee};\r\n  for (let i = 0; i < days; i++) {\r\n    // console.log('new tdee params', newTdee.tdeeParams);\r\n    newTdee = calculateTdee(newTdee.tdeeParams, deficit);\r\n    if(i % step === 0)\r\n      resultData.push({...newTdee, day: i});\r\n  }\r\n  // console.log(resultData);\r\n  return resultData;\r\n}\r\n\r\nexport function getGoalDate(weightLossPlanState: WeightLossPlanModel, deficit: number): GoalDateModel {\r\n  if(!weightLossPlanState.weightGoal || !weightLossPlanState.weight || weightLossPlanState.weight <= weightLossPlanState.weightGoal) {\r\n    return {days: 0, average: 0};\r\n  }\r\n  let newWeightLossPlanState = {...weightLossPlanState};\r\n  let calorieLoss = [];\r\n  for (let i = 0; i < 365 * 2; i++) {\r\n    let tdeeResult: TDEEModel = calculateTdee(newWeightLossPlanState, deficit);\r\n    newWeightLossPlanState = {...newWeightLossPlanState, weight: tdeeResult.updatedWeight}\r\n    calorieLoss.push(tdeeResult.calorieLoss);\r\n    if(weightLossPlanState.weightGoal > tdeeResult.updatedWeight)\r\n      return {days: i, average: calorieLoss.reduce((a: number, b: number) => a + b, 0) / i};\r\n  }\r\n\r\n  return {days: -1, average: -1};\r\n}\r\n\r\n\r\nexport function getWeightGoalFromBFPGoal(weightLossPlanState: WeightLossPlanModel) {\r\n  let initialLossTarget = weightLossPlanState.weight - weightLossPlanState.weightGoal;\r\n  let initialLeanMass = weightLossPlanState.weight - weightLossPlanState.weight * (weightLossPlanState.bfp / 100);\r\n  let totalLeanMassLoss = initialLossTarget * 0.25;\r\n  let realLeanMass = initialLeanMass - totalLeanMassLoss;\r\n  let targetWeight = realLeanMass / (1 - (weightLossPlanState.bfpGoal / 100));\r\n  return Number.parseInt(targetWeight.toFixed(0));\r\n}","import {atom, selector, useRecoilState} from \"recoil\";\r\nimport {calculateTdee, getGoalDate, getWeightGoalFromBFPGoal} from \"../utils/WeightLossUtils\";\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport {useEffect, useRef} from \"react\";\r\nimport qs from 'qs';\r\n\r\n// export function SetUrlHook() {\r\n//   const [weightLossPlanState, setWeightLossPlanState] = useRecoilState(WeightLossPlanState);\r\n//   const latestWeightLossPlanState = useRef(weightLossPlanState);\r\n//   const [searchParams, setSearchParams] = useSearchParams();\r\n//   // useEffect(() => {\r\n//   //   latestWeightLossPlanState.current = weightLossPlanState;\r\n//   // }, [weightLossPlanState]);\r\n//\r\n//   useEffect(()=>{\r\n//     // your custom hook logic here\r\n//     // use latestSomeState.current for latest value\r\n//     setSearchParams(qs.stringify(weightLossPlanState));\r\n//   });\r\n//\r\n// }\r\n\r\n\r\nexport interface WeightLossPlanModel {\r\n  gender: string;\r\n  weight: number;\r\n  age: number;\r\n  bfp: number;\r\n  bfpGoal: number;\r\n  height: number;\r\n  exerciseVolume: number;\r\n  activityScale: number;\r\n  deficit: number;\r\n  deficitMode: string;\r\n  targetMode: string;\r\n  days: number;\r\n  weightGoal: number;\r\n}\r\n\r\nexport interface TDEEModel {\r\n  updatedWeight: number,\r\n  bmr: number,\r\n  tdee: number,\r\n  calorieIntake: number,\r\n  calorieLoss: number,\r\n  exercise: number\r\n}\r\n\r\nexport interface GoalDateModel {\r\n  days: number,\r\n  average: number\r\n}\r\n\r\nlet defaultValue: WeightLossPlanModel = {\r\n  gender: 'Male',\r\n  weight: 160,\r\n  age: 20,\r\n  bfp: 30,\r\n  bfpGoal: 15,\r\n  height: 12 * 5,\r\n  exerciseVolume: 0,\r\n  activityScale: 1.2,\r\n  deficit: -10,\r\n  deficitMode: 'calories',\r\n  targetMode: 'weight',\r\n  days: 30,\r\n  weightGoal: 150\r\n}\r\n\r\n\r\nconst WeightLossPlanState = atom({\r\n  key: 'WeightLossPlanState',\r\n  default: defaultValue,\r\n  // effects_UNSTABLE: [\r\n  //   ({onSet}) => {\r\n  //     onSet((newValue, oldValue) => {\r\n  //\r\n  //     })\r\n  //   }\r\n  // ]\r\n});\r\n\r\nconst TDEEState = selector({\r\n  key: 'tdeeState',\r\n  get: ({get}) => {\r\n    const weightLossPlanState = get(WeightLossPlanState);\r\n    return calculateTdee(weightLossPlanState, weightLossPlanState.deficit/100);\r\n  }\r\n})\r\n\r\nconst GoalDateState = selector({\r\n  key: 'goalDateState',\r\n  get: ({get}) => {\r\n    const weightLossPlanState = get(WeightLossPlanState);\r\n    return getGoalDate(weightLossPlanState, weightLossPlanState.deficit/100);\r\n  }\r\n})\r\n\r\nconst WeightGoalState = selector({\r\n  key: 'weightGoalState',\r\n  get: ({get}) => {\r\n    const weightLossPlanState = get(WeightLossPlanState);\r\n    if(weightLossPlanState.targetMode == 'bfp')\r\n      return getWeightGoalFromBFPGoal(weightLossPlanState);\r\n    else\r\n      return weightLossPlanState.weightGoal;\r\n  }\r\n})\r\n\r\nexport default {\r\n  state: WeightLossPlanState,\r\n  selectors: {\r\n    TDEEState,\r\n    GoalDateState,\r\n    WeightGoalState\r\n  }\r\n};","import {\r\n  Box,\r\n  Card, Container,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Slider,\r\n  Switch,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport \"./TDEEInput.scss\"\r\nimport React, {useState} from \"react\";\r\nimport {useRecoilState, useRecoilValue} from \"recoil\";\r\nimport WeightLossPlanState, {WeightLossPlanModel} from \"../state/WeightLossPlanState\";\r\nimport {calculateTdee} from \"../utils/WeightLossUtils\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {flexbox, spacing} from '@mui/system';\r\nimport _ from \"lodash\";\r\n\r\nfunction TDEEInput() {\r\n  const [weightLossPlanState, setWeightLossPlanState] = useRecoilState(WeightLossPlanState.state);\r\n  const tdeeState = useRecoilValue(WeightLossPlanState.selectors.TDEEState);\r\n\r\n  // const [gender, setGender] = useState('Male')\r\n  // const [weight, setWeight] = useState(0);\r\n  // const [age, setAge] = useState(0);\r\n  // const [bfp, setBfp] = useState(0);\r\n  // const [inches, setInches] = useState(0);\r\n  // const [exerciseVolume, setExerciseVolume] = useState(0);\r\n\r\n   let handleStateChange = _.throttle(\r\n    (newState: WeightLossPlanModel) => {\r\n    console.log('actually setting the new state');\r\n    setWeightLossPlanState(newState);\r\n  }\r\n  , 100, {trailing: false});\r\n\r\n  let someValue: number = 1.2;\r\n  return (\r\n    <Container className={\"card-container\"}>\r\n      <h2>Find your Total Daily Energy Expenditure</h2>\r\n      {/*<span style={{display: 'block', position: \"relative\", top: '-1rem', marginBottom: 0}}>(How much you burn a day)</span>*/}\r\n      <form>\r\n        <FormControl style={{flexGrow: 1, flexBasis: 0, width: '100%'}} variant='filled'>\r\n          <InputLabel shrink>Gender</InputLabel>\r\n          <Select label={'Gender'}\r\n                  value={weightLossPlanState.gender}\r\n                  defaultValue={\"\"}\r\n                  onChange={(e, value) => setWeightLossPlanState({...weightLossPlanState, gender: e.target.value as string})}\r\n                  style={{width: '100%'}}\r\n          >\r\n            {['Male', 'Female'].map(x => (<MenuItem key={x} value={x}>{(x as string)}</MenuItem>))}\r\n          </Select>\r\n        </FormControl>\r\n        <div style={{display:'flex', gap: '1rem'}}>\r\n          <TextField\r\n            label=\"Weight\"\r\n            type=\"number\"\r\n            inputProps={{inputMode:\"numeric\", min: 0}}\r\n            variant='filled'\r\n            style={{flexGrow: 1}}\r\n            value={weightLossPlanState.weight}\r\n            onChange={(event) => setWeightLossPlanState({...weightLossPlanState, weight: Number.parseInt(event.target.value)})}\r\n          />\r\n          <TextField\r\n            label=\"Age\"\r\n            type=\"number\"\r\n            inputProps={{inputMode:\"numeric\", min: 0}}\r\n            variant='filled'\r\n            style={{flexGrow: 1}}\r\n            value={weightLossPlanState.age}\r\n            onChange={(event) => setWeightLossPlanState({...weightLossPlanState, age:  Number.parseInt(event.target.value)})}\r\n          />\r\n        </div>\r\n        <div className=\"height-controls\">\r\n          <FormControl variant=\"filled\">\r\n            <InputLabel shrink>Height (ft)</InputLabel>\r\n            <Select\r\n              label={'ft'}\r\n              value={Math.floor(weightLossPlanState.height / 12) < 4 ? 4 : Math.floor(weightLossPlanState.height / 12)}\r\n              defaultValue={4}\r\n              onChange={(e, value) => setWeightLossPlanState({\r\n                ...weightLossPlanState,\r\n                height: (e.target.value as number) * 12 + (weightLossPlanState.height % 12)\r\n              })}\r\n            >\r\n              {[4, 5, 6, 7, 8].map(x => (<MenuItem key={x} value={x}>{x}'</MenuItem>))}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          <FormControl variant=\"filled\">\r\n            <InputLabel shrink>Height (in)</InputLabel>\r\n            <Select label={'in'}\r\n                    value={weightLossPlanState.height % 12}\r\n                    defaultValue={0}\r\n                    onChange={(e, value) => {\r\n                      setWeightLossPlanState({\r\n                        ...weightLossPlanState,\r\n                        height: (weightLossPlanState.height - weightLossPlanState.height % 12) + (e.target.value as number)\r\n                      });\r\n                    }}>\r\n              {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(x => (<MenuItem key={x} value={x}>{x}\"</MenuItem>))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className=\"weight-control\" style={{flexGrow: 1, flexBasis: 0}}>\r\n          <Typography gutterBottom>How active are you? (Calories burned through daily routine and exercise)</Typography>\r\n          <div className=\"slider-control\">\r\n            <Slider\r\n              defaultValue={1.2}\r\n              aria-labelledby=\"discrete-slider-custom\"\r\n              step={0.01}\r\n              valueLabelDisplay=\"auto\"\r\n              min={1.1}\r\n              max={2.4}\r\n              marks = {[\r\n                {\r\n                  value: 1.2,\r\n                  label: 'Sedentary'\r\n                },\r\n                {\r\n                  value: 1.55,\r\n                  label: 'Moderately'\r\n                },\r\n                {\r\n                  value: 1.9,\r\n                  label: 'Extremely'\r\n                },\r\n                {\r\n                  value: 2.3,\r\n                  label: 'Athlete'\r\n                }\r\n              ]}\r\n              valueLabelFormat={(value) => `${Math.floor(tdeeState.exercise)}`}\r\n              // value={someValue}\r\n              onChange={(e, value) => {\r\n                // console.log('onChanged');\r\n                // someValue = value as number;\r\n                // handleStateChange.cancel();\r\n                handleStateChange({...weightLossPlanState, activityScale: value as number})\r\n              }}\r\n            />\r\n            {/*<Typography>{tdeeState.activityScale}</Typography>*/}\r\n          </div>\r\n        </div>\r\n        <Card variant=\"outlined\" style={{padding: '1rem'}}>\r\n          <div className=\"weight-control\" style={{flexGrow: 1, flexBasis: 0}}>\r\n            <Typography gutterBottom>Your Basal Metabolic Rate (BMR)\r\n              is <strong>{Math.floor(tdeeState.bmr)} cal</strong>.</Typography>\r\n          </div>\r\n          <div className=\"weight-control\" style={{flexGrow: 1, flexBasis: 0}}>\r\n            <Typography gutterBottom>You\r\n              burn <strong>{Math.floor(tdeeState.exercise)} cal</strong> from\r\n              exercise and daily activities.</Typography>\r\n          </div>\r\n          <div className=\"weight-control\" style={{flexGrow: 1, flexBasis: 0}}>\r\n            <Typography gutterBottom>Your total daily energy expenditure (with exercise)\r\n              is <strong>{Math.floor(tdeeState.tdee)} cal</strong>.</Typography>\r\n          </div>\r\n        </Card>\r\n      </form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TDEEInput;","import {\r\n  Container,\r\n  Slider, TextField,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport \"./TDEEInput.scss\"\r\n\r\nimport {useRecoilState, useRecoilValue} from \"recoil\";\r\nimport WeightLossPlanState from \"../state/WeightLossPlanState\";\r\nimport {calculateTdee, getGoalDate} from \"../utils/WeightLossUtils\";\r\nimport moment from \"moment\";\r\nimport {Card, Paper, ToggleButton, ToggleButtonGroup} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nfunction addDays(date: Date, days: number) {\r\n  var result = new Date(date);\r\n  result.setDate(result.getDate() + days);\r\n  return result;\r\n}\r\n\r\nfunction WeightLossGoals() {\r\n  const [weightLossPlanState, setWeightLossPlanState] = useRecoilState(WeightLossPlanState.state);\r\n  const tdeeState = useRecoilValue(WeightLossPlanState.selectors.TDEEState);\r\n  const goalDateState = useRecoilValue(WeightLossPlanState.selectors.GoalDateState);\r\n  const weightGoalState = useRecoilValue(WeightLossPlanState.selectors.WeightGoalState);\r\n\r\n  function getBodyWeightPercentageDelta() {\r\n    let goalResult = (goalDateState.average as number) * 7 / 3500;\r\n    let result = 1 * goalResult / weightLossPlanState.weight;\r\n    return (result * 100).toFixed(2)\r\n  }\r\n\r\n  function getDeficitBasedOnMode() {\r\n    switch (weightLossPlanState.deficitMode) {\r\n      case 'calories':\r\n        return (goalDateState.average).toFixed(0);\r\n      case 'caloriesConsumed':\r\n        return Math.floor(tdeeState.calorieIntake);\r\n      case 'caloriePercentage':\r\n        return weightLossPlanState.deficit;\r\n      case 'bodyWeightPercentage':\r\n        return getBodyWeightPercentageDelta();\r\n      default:\r\n        return weightLossPlanState.deficit;\r\n    }\r\n  }\r\n\r\n  function getUnitBasedOnMode() {\r\n    switch (weightLossPlanState.deficitMode) {\r\n      case 'calories':\r\n        return ' calories burned per day';\r\n      case 'caloriesConsumed':\r\n        return ' calories consumed per day';\r\n      case 'caloriePercentage':\r\n        return ' % of TDEE per day';\r\n      case 'bodyWeightPercentage':\r\n      default:\r\n        return '% of body weight per week';\r\n    }\r\n\r\n  }\r\n\r\n  let handleStateChange = _.throttle((newState) => {\r\n    setWeightLossPlanState(newState);\r\n  }, 300, {trailing: false});\r\n\r\n  return (\r\n    <Container className={\"card-container\"}>\r\n      <h2>Set your weight loss goals</h2>\r\n      <form>\r\n        <Typography>Do you want to target a body fat percentage or a weight?</Typography>\r\n        <ToggleButtonGroup style={{width: '100%'}}\r\n                           aria-label=\"outlined primary button group\" value={weightLossPlanState.targetMode}\r\n                           exclusive\r\n                           onChange={(\r\n                             event: React.MouseEvent<HTMLElement>,\r\n                             newAlignment: string | null,\r\n                           ) => {\r\n                             setWeightLossPlanState({...weightLossPlanState, targetMode: newAlignment || ''})\r\n                           }}\r\n        >\r\n          <ToggleButton value=\"weight\">Weight</ToggleButton>\r\n          <ToggleButton value=\"bfp\">Body Fat %</ToggleButton>\r\n        </ToggleButtonGroup>\r\n        {weightLossPlanState.targetMode == 'bfp' &&\r\n        <div>\r\n            <Paper elevation={0} sx={{padding: '0.75rem',marginBottom: '1rem', color: '#bf360c', bgcolor: '#fbe9e7'}}>\r\n                <Typography>The target weight is being calculated assuming you will lose 75% fat and 25% lean mass.</Typography>\r\n            </Paper>\r\n            <div style={{display: 'flex', gap: '1rem'}}>\r\n                <TextField\r\n                    label=\"Current Body Fat Percentage\"\r\n                    type=\"number\"\r\n                    InputProps={{inputProps: { min: 5 }}}\r\n                    variant='filled'\r\n                    style={{flexGrow: 1}}\r\n                    value={weightLossPlanState.bfp || ''}\r\n                    onChange={(event) => {\r\n                      // weightGoalText = event.target.value;\r\n                      if(!event.target.value)\r\n                        event.target.value = '';\r\n                      console.log('Setting cBFP to: ', event.target.value);\r\n                      setWeightLossPlanState({\r\n                        ...weightLossPlanState,\r\n                        bfp: Number.parseInt(event.target.value),\r\n                      })\r\n                    }}\r\n\r\n                />\r\n                <TextField\r\n                    label=\"Target Body Fat Percentage\"\r\n                    type=\"number\"\r\n                    InputProps={{inputProps: { min: 5 }}}\r\n                    variant='filled'\r\n                    style={{flexGrow: 1}}\r\n                    value={weightLossPlanState.bfpGoal || ''}\r\n                    onChange={(event) => {\r\n                      // weightGoalText = event.target.value;\r\n                      console.log('Setting tBFP to: ', event.target.value);\r\n                      setWeightLossPlanState({\r\n                        ...weightLossPlanState,\r\n                        bfpGoal: Number.parseInt(event.target.value),\r\n                      })\r\n                    }}\r\n\r\n                />\r\n            </div>\r\n        </div>\r\n        }\r\n        <TextField\r\n          label=\"Target Weight\"\r\n          type=\"number\"\r\n          InputProps={{inputProps: { min: 0 }}}\r\n          variant='filled'\r\n          disabled={weightLossPlanState.targetMode == 'bfp'}\r\n          style={{flexGrow: 1, width: '100%'}}\r\n          value={weightGoalState || ''}\r\n          onChange={(event) => {\r\n            // weightGoalText = event.target.value;\r\n            console.log('Setting THE weightGoal to: ', event.target.value);\r\n            setWeightLossPlanState({\r\n              ...weightLossPlanState,\r\n              weightGoal:  Number.parseInt(event.target.value)\r\n            })\r\n          }}\r\n\r\n        />\r\n        <Typography gutterBottom>How do you want to measure your daily change?</Typography>\r\n        <ToggleButtonGroup style={{width: '100%'}}\r\n                           aria-label=\"outlined primary button group\" value={weightLossPlanState.deficitMode}\r\n                           exclusive\r\n                           onChange={(\r\n                             event: React.MouseEvent<HTMLElement>,\r\n                             newAlignment: string | null,\r\n                           ) => {\r\n                             setWeightLossPlanState({...weightLossPlanState, deficitMode: newAlignment || ''})\r\n                           }}\r\n        >\r\n          <ToggleButton value=\"calories\">Calories Burned<br/>(Per Day)</ToggleButton>\r\n          <ToggleButton value=\"caloriesConsumed\">Calories Consumed<br/>(Per Day)</ToggleButton>\r\n          <ToggleButton value=\"caloriePercentage\">TDEE %<br/>(Per Day)</ToggleButton>\r\n          <ToggleButton value=\"bodyWeightPercentage\">Body Weight %<br/>(Per Week)</ToggleButton>\r\n        </ToggleButtonGroup>\r\n        <Typography gutterBottom>Target Change: {getDeficitBasedOnMode() + getUnitBasedOnMode()}</Typography>\r\n        <div className=\"slider-control\">\r\n          <Slider\r\n            defaultValue={-1}\r\n            aria-labelledby=\"discrete-slider-custom\"\r\n            step={0.01}\r\n            valueLabelDisplay=\"auto\"\r\n            value={weightLossPlanState.deficit}\r\n            onChange={(e, value) => handleStateChange({...weightLossPlanState, deficit: value as number})}\r\n            min={-75}\r\n            max={0}\r\n            marks={[\r\n              {\r\n                value: 0,\r\n                label: 'Maintenance'\r\n              },\r\n              {\r\n                value: -19,\r\n                label: 'Slow',\r\n              },\r\n              {\r\n                value: -30,\r\n                label: 'Fast',\r\n\r\n              },\r\n              {\r\n                value: -60,\r\n                label: 'Crash Diet'\r\n              }\r\n            ]}\r\n            valueLabelFormat={(_) => getDeficitBasedOnMode()}\r\n          />\r\n        </div>\r\n        <Card variant=\"outlined\" style={{padding: '1rem'}}>\r\n          <div className=\"weight-control\" style={{flexGrow: 1, flexBasis: 0}}>\r\n            <Typography gutterBottom>Your initial target calorie intake should\r\n              be <strong>{Math.floor(tdeeState.calorieIntake)} cal</strong>.</Typography>\r\n          </div>\r\n          <div className=\"weight-control\" style={{flexGrow: 1, flexBasis: 0}}>\r\n            <Typography gutterBottom>You will\r\n              reach <strong>{weightLossPlanState.weightGoal} lbs </strong> in <strong>{goalDateState.days} days</strong> on <strong>{moment(addDays(new Date(), goalDateState.days)).format('MMM Do YY')}</strong> with\r\n              an average weight loss of <strong>{((goalDateState.average as number) * 7 / 3500).toFixed(2)} lbs</strong> per\r\n              week and <strong>{(goalDateState.average * -1).toFixed(0)} cal</strong> burned per day.</Typography>\r\n          </div>\r\n        </Card>\r\n      </form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default WeightLossGoals;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport TDEEInput from \"./components/TDEEInput\";\nimport {\n  AppBar,\n  BottomNavigation,\n  BottomNavigationAction,\n  Container,\n  Grid,\n  IconButton,\n  Toolbar,\n  Typography\n} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport WeightLossGoals from \"./components/WeightLossGoals\";\nimport Timeline from \"./components/Timeline\";\nimport { useTheme } from '@mui/material';\n// import {SetUrlHook} from \"./state/WeightLossPlanState\";\n\n\nfunction App() {\n  // SetUrlHook();\n  return (\n    <div className=\"App\" style={{display: 'flex', flexDirection: 'column', height: '100%'}}>\n      <AppBar position={\"static\"}>\n        <Toolbar variant=\"dense\">\n          {/*<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">*/}\n          {/*  <MenuIcon />*/}\n          {/*</IconButton>*/}\n          <Typography variant=\"h6\" color=\"inherit\">\n            Weight Loss Planner and Visualizer\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container className=\"main-container\">\n        <Grid container xs={12} spacing={4}>\n          <Grid item xs={12} lg={6} className=\"top-grid\">\n            <TDEEInput/>\n          </Grid>\n          <Grid item xs={12} lg={6} className=\"bottom-grid\">\n            <WeightLossGoals/>\n          </Grid>\n          {/*<Grid item xs={12}>*/}\n          {/*  <Timeline/>*/}\n          {/*</Grid>*/}\n        </Grid>\n      </Container>\n      {/*<BottomNavigation style={{position: 'absolute', bottom: 0, right: 0, left: 0, display: 'flex'}}>*/}\n      {/*  <BottomNavigationAction label=\"Recents\" icon={<RestoreIcon />} />*/}\n      {/*  <BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} />*/}\n      {/*  <BottomNavigationAction label=\"Nearby\" icon={<LocationOnIcon />} />*/}\n      {/*</BottomNavigation>*/}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {RecoilRoot} from \"recoil\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}